{"version":3,"sources":["containers/App.js","serviceWorker.js","index.js"],"names":["INITIAL","tasklist","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","addToList","newTask","setState","prevState","concat","title","completed","moveToCompletedList","index","a","todo","update","defineProperty","$set","deleteTasks","splice","objectSpread","len","filter","x","length","totalLen","completedPer","react_default","createElement","className","App_Form","onSubmit","version","id","xmlns","link","y","height","space","fill","width","App_ListItems","onChange","delete","Component","Form","handleSubmit","event","preventDefault","_this2","props","tasks","value","_this3","type","placeholder","ref","input","ListItems","_this4","handleClick","target","prop","e","bind","assertThisInitialized","_this5","map","key","App_ListItem","assign","task","change","ListItem","name","for","viewBox","d","points","onClick","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a025555.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport update from 'immutability-helper';\r\n\r\nimport '../globalstyle.scss';\r\n//import ListItem from '../components/ListItem';\r\n\r\nlet INITIAL = {\r\n    tasklist: []\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = { ...INITIAL };\r\n    }\r\n    state = {\r\n        tasklist: []\r\n    }\r\n    addToList = (newTask) => {\r\n        this.setState(prevState => ({\r\n            tasklist: prevState.tasklist.concat(\r\n                {\r\n                    title: newTask,\r\n                    completed: false\r\n                })\r\n        }));\r\n    };\r\n    moveToCompletedList = (index) => {\r\n        let a = this.state.tasklist[index].completed;\r\n        let todo = update(this.state.tasklist, { [index]: { completed: { $set: !a } } })\r\n        this.setState({ tasklist: todo });\r\n    };\r\n    deleteTasks = (index) => {\r\n        this.state.tasklist.splice(index, 1);\r\n        this.setState({\r\n            tasklist: this.state.tasklist\r\n        })\r\n    }\r\n    render() {\r\n        let len = (this.state.tasklist.filter(x => !x.completed)).length;\r\n        let totalLen = this.state.tasklist.length;\r\n        let completedPer = ((totalLen - len) * 100) / totalLen | 0;\r\n        return (\r\n            <div className='main'>\r\n                <h2 className=\"title\">Todo Application</h2>\r\n                <hr />\r\n                <Form onSubmit={this.addToList} />\r\n                <p className='sub-title is-size-7'>{len} Task{len > 1 ? 's' : ''}</p>\r\n                <svg version=\"1.1\" className=\"progress-bar2-wid\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" link=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" height=\"5px\" space=\"preserve\">\r\n                    <rect x=\"0.25\" fill=\"#E5E5E5\" width=\"500\" height=\"8\"></rect>\r\n                    <rect className=\"progress-bar3\" fill=\"#8EC241\" width={completedPer + \"%\"} height=\"8\"></rect>\r\n                </svg>\r\n                <ListItems tasklist={this.state.tasklist} onChange={this.moveToCompletedList} delete={this.deleteTasks} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Form extends Component {\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.tasks.value);\r\n        this.tasks.value = \"\";\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"add field\">\r\n                    <div className=\"control\">\r\n                        <input className=\"add input is-rounded\" type=\"textbox\" placeholder=\"things to do\" ref={(input) => this.tasks = input} />\r\n                        <button className=\"add button is-primary\" type=\"submit\">+</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItems extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n    handleClick = (target) => {\r\n        this.props.onChange(target.target.value);\r\n    };\r\n    deleteTasks = (prop, e) => {\r\n        this.props.delete(prop.index);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.tasklist.map((key, value) => <ListItem {...key} key={value} task={key.title} change={this.handleClick} index={value} delete={this.deleteTasks} />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ListItem = (props) => {\r\n    return (\r\n        <div className={'task-list ' + (props.completed ? 'done' : '')}>\r\n            <input type=\"checkbox\" id={'ck'+props.index} name=\"list\" value={props.index} onChange={props.change} />\r\n            <label for={'ck'+props.index}>\r\n                <svg className=\"check\" x=\"0px\" y=\"0px\" viewBox=\"0 0 10 10\">\r\n                    <path className=\"st0\" d=\"M5,9.8L5,9.8C2.3,9.8,0.2,7.7,0.2,5v0c0-2.7,2.2-4.8,4.8-4.8h0c2.7,0,4.8,2.2,4.8,4.8v0C9.8,7.7,7.7,9.8,5,9.8z\" />\r\n                    <polyline className=\"st1\" points=\"7.8,3.1 3.9,6.9 2.2,5.2\" />\r\n                </svg>\r\n            </label>\r\n            <label className=\"task\">{props.task}</label>\r\n            <button className=\"delete\" onClick={(e) => props.delete(props, e)}></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}