{"version":3,"sources":["firebase/firebase.js","containers/App.js","serviceWorker.js","index.js"],"names":["db","firebase","Object","objectSpread","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","INITIAL","tasklist","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","data","ref","on","snapshot","arr","k","exists","val","push","setState","addToList","newTask","uid","uuidv4","set","id","title","completed","udpateTask","index","a","state","update","deleteTasks","console","log","bind","assertThisInitialized","len","filter","x","length","totalLen","completedPer","react_default","createElement","className","App_Form","onSubmit","version","xmlns","link","y","height","space","fill","width","App_ListItems","onChange","delete","Component","Form","handleSubmit","event","preventDefault","_this2","tasks","value","_this3","type","placeholder","input","ListItems","_this4","updateTask","target","prop","e","_this5","map","key","App_ListItem","assign","task","change","ListItem","name","htmlFor","viewBox","d","points","onClick","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7cead09.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nimport 'firebase/database';\r\n\r\nvar config = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_FIREBASE_DBURL,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECTID,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGEBUCKET,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGINGSENDERID\r\n  };\r\nvar app = firebase.initializeApp({ ...config });\r\n\r\nconst db = firebase.database();\r\n\r\nexport {\r\n    db\r\n}","import React, { Component } from 'react';\r\nimport update from 'immutability-helper';\r\n\r\nimport '../globalstyle.scss';\r\nimport { db } from '../firebase/firebase';\r\nimport uuidv4 from 'uuid/v4';\r\n\r\nlet INITIAL = {\r\n    tasklist: []\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { ...INITIAL };\r\n        this.addToList = this.addToList.bind(this);\r\n    }\r\n\r\n    componentWillMount = () => {\r\n        var data;\r\n        db.ref('tasks/').on(\"value\", (snapshot) => {\r\n            var arr = [];\r\n            data = snapshot.exists() ? snapshot.val() : {};\r\n            for (var k in data) {\r\n                arr.push(data[k]);\r\n            }\r\n            this.setState({\r\n                tasklist: arr\r\n            })\r\n        });\r\n    }\r\n\r\n    addToList = (newTask) => {\r\n        let uid = uuidv4();\r\n        var data = {};\r\n        //add\r\n        db.ref('tasks/' + uid).set({\r\n            id: uid,\r\n            title: newTask,\r\n            completed: false\r\n        });\r\n    };\r\n    udpateTask = (index) => {\r\n        let a = this.state.tasklist[index].completed;\r\n       // let todo = update(this.state.tasklist, { [index]: { completed: { $set: !a } } })\r\n       // this.setState({ tasklist: todo });\r\n        db.ref('tasks/' +this.state.tasklist[index].id).update({\r\n            completed: !a\r\n        });\r\n\r\n    };\r\n    deleteTasks = (index) => {\r\n        // this.state.tasklist.splice(index, 1);\r\n        // this.setState({\r\n        //     tasklist: this.state.tasklist\r\n        // })\r\n        console.log(this.state.tasklist[index]);\r\n        db.ref('tasks/' +this.state.tasklist[index].id).set(null);  \r\n\r\n    }\r\n    render() {\r\n        let len = (this.state.tasklist.filter(x => !x.completed)).length;\r\n        let totalLen = this.state.tasklist.length;\r\n        let completedPer = ((totalLen - len) * 100) / totalLen | 0;\r\n        return (\r\n            <div className='main'>\r\n                <h2 className=\"title\">Todo Application</h2>\r\n                <hr />\r\n                <Form onSubmit={this.addToList} />\r\n                <p className='sub-title is-size-7'>{len} Task{len > 1 ? 's' : ''}</p>\r\n                <svg version=\"1.1\" className=\"progress-bar2-wid\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" link=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" height=\"5px\" space=\"preserve\">\r\n                    <rect x=\"0.25\" fill=\"#E5E5E5\" width=\"500\" height=\"8\"></rect>\r\n                    <rect className=\"progress-bar3\" fill=\"#8EC241\" width={completedPer + \"%\"} height=\"8\"></rect>\r\n                </svg>\r\n                <ListItems tasklist={this.state.tasklist} onChange={this.udpateTask} delete={this.deleteTasks} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Form extends Component {\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.tasks.value);\r\n        this.tasks.value = \"\";\r\n    }\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div className=\"add field\">\r\n                    <div className=\"control\">\r\n                        <input className=\"add input is-rounded\" type=\"textbox\" placeholder=\"things to do\" ref={(input) => this.tasks = input} />\r\n                        <button className=\"add button is-primary\" type=\"submit\">+</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nclass ListItems extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateTask = this.updateTask.bind(this);\r\n    }\r\n    updateTask = (target) => {\r\n        this.props.onChange(target.target.value);\r\n    };\r\n    deleteTasks = (prop, e) => {\r\n        this.props.delete(prop.index);\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.tasklist.map((key, value) => <ListItem {...key} key={value} task={key.title} change={this.updateTask} index={value} delete={this.deleteTasks} />)}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst ListItem = (props) => {\r\n    return (\r\n        <div className={'task-list ' + (props.completed ? 'done' : '')}>\r\n            <input type=\"checkbox\" id={'ck' + props.index} name=\"list\" value={props.index} onChange={props.change} />\r\n            <label htmlFor={'ck' + props.index}>\r\n                <svg className=\"check\" x=\"0px\" y=\"0px\" viewBox=\"0 0 10 10\">\r\n                    <path className=\"st0\" d=\"M5,9.8L5,9.8C2.3,9.8,0.2,7.7,0.2,5v0c0-2.7,2.2-4.8,4.8-4.8h0c2.7,0,4.8,2.2,4.8,4.8v0C9.8,7.7,7.7,9.8,5,9.8z\" />\r\n                    <polyline className=\"st1\" points=\"7.8,3.1 3.9,6.9 2.2,5.2\" />\r\n                </svg>\r\n            </label>\r\n            <label className=\"task\">{props.task}</label>\r\n            <button className=\"delete\" onClick={(e) => props.delete(props, e)}></button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}